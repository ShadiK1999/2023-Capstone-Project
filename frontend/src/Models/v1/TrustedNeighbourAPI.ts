/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/login': {
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['AuthRequest'];
          'text/json': components['schemas']['AuthRequest'];
          'application/*+json': components['schemas']['AuthRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/debug': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
  };
  '/debug/{name}': {
    get: {
      parameters: {
        path: {
          name: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
  };
  '/debug/auth': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
  '/debug/db': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': number;
            'application/json': number;
            'text/json': number;
          };
        };
      };
    };
  };
  '/points/search': {
    /** Retrieves delivery points (both internal and external) that match the provided filters. */
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['PointFilterList'];
          'text/json': components['schemas']['PointFilterList'];
          'application/*+json': components['schemas']['PointFilterList'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['DeliveryPointList'];
          };
        };
      };
    };
  };
  '/users': {
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['NewUser'];
          'text/json': components['schemas']['NewUser'];
          'application/*+json': components['schemas']['NewUser'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AuthRequest: {
      email?: string | null;
      password?: string | null;
    };
    /** @description Coordinates of a location. */
    Coords: {
      /**
       * Format: double
       * @description The latitude component as decimal degrees (between -90 and 90).
       */
      latitude?: number;
      /**
       * Format: double
       * @description The longitude component as decimal degrees (between -180 and 180).
       */
      longitude?: number;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    DayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
    DaysFilter: {
      filterType: 'day';
      dayOfWeek?: components['schemas']['DayOfWeek'];
    } & Omit<components['schemas']['PointFilter'], 'filterType'>;
    /** @description A delivery point with associated metadata. */
    DeliveryPoint: {
      location?: components['schemas']['Coords'];
      /** @description The address of this delivery point. */
      address?: string | null;
      /** @description The hours in the week that this delivery point is open for. */
      hours?: components['schemas']['TimeSlot'][] | null;
      /** @description The internal ID of this delivery point. If @null, this delivery point is external. */
      id?: string | null;
    };
    DeliveryPointList: {
      points?: components['schemas']['DeliveryPoint'][] | null;
    };
    HoursFilter: {
      filterType: 'hours';
      /** Format: int32 */
      startHour?: number;
      /** Format: int32 */
      startMin?: number;
      /** Format: int32 */
      endHour?: number;
      /** Format: int32 */
      endMin?: number;
    } & Omit<components['schemas']['PointFilter'], 'filterType'>;
    /** @description Filters points by their proximity to a given location. The `filterType` parameter must be `"location"`. */
    LocationFilter: {
      filterType: 'location';
      coords?: components['schemas']['Coords'];
      /**
       * Format: int32
       * @description The maximum range (in kilometres) that a point can be from the central location
       * to be included in this filter.
       */
      rangeKm?: number;
    } & Omit<components['schemas']['PointFilter'], 'filterType'>;
    NewUser: {
      name?: string | null;
      email?: string | null;
      password?: string | null;
      phoneNumber?: string | null;
    };
    PointFilter: {
      filterType: string;
    };
    PointFilterList: {
      filters?:
        | (
            | components['schemas']['LocationFilter']
            | components['schemas']['DaysFilter']
            | components['schemas']['HoursFilter']
          )[]
        | null;
    };
    /** @description A period of time on a day of the week. */
    TimeSlot: {
      day?: components['schemas']['DayOfWeek'];
      /** Format: int32 */
      startHour?: number;
      /** Format: int32 */
      startMinute?: number;
      /** Format: int32 */
      endHour?: number;
      /** Format: int32 */
      endMinute?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
